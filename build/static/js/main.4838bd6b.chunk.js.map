{"version":3,"sources":["components/Header.js","components/WeatherCard.js","components/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","WeatherCard","temprature","city","sunrise","sunset","humidity","icon","weatherIcons","faSmog","size","color","faBolt","faCloudRain","faSnowman","faSun","faCloud","Card","Content","Feed","Event","moment","format","Math","floor","Date","toLocaleTimeString","Forecast","forcast","style","marginTop","Group","itemsPerRow","map","data","unix","dt","round","temp","max","min","Meta","Description","weather","description","App","useState","latitude","setLatitude","longitude","setLongitude","setCity","setTemprature","setHumidity","setSunrise","setSunset","setIcon","setForecast","loading","setloading","useEffect","navigator","geolocation","getCurrentPosition","position","coords","axios","get","then","weatherData","current","timezone","main","daily","Loader","active","inline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4838bd6b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"app-header\">\r\n            React Weather Application\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Card, Feed } from 'semantic-ui-react'\r\nimport moment from 'moment';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBolt, faCloud, faCloudRain, faSmog, faSnowman, faSun } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function WeatherCard(\r\n  { temprature, city, sunrise, sunset, humidity, icon }) {\r\n  let weatherIcons = null;\r\n\r\n  if (icon === 'Haze') {\r\n    weatherIcons = <FontAwesomeIcon icon={faSmog} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Thunderstorm') {\r\n    weatherIcons = <FontAwesomeIcon icon={faBolt} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Drizzle') {\r\n    weatherIcons = <FontAwesomeIcon icon={faCloudRain} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Rain') {\r\n    weatherIcons = <FontAwesomeIcon icon={faCloudRain} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Snow') {\r\n    weatherIcons = <FontAwesomeIcon icon={faSnowman} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Mist') {\r\n    weatherIcons = <FontAwesomeIcon icon={faSmog} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Clear') {\r\n    weatherIcons = <FontAwesomeIcon icon={faSun} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  else if (icon === 'Clouds') {\r\n    weatherIcons = <FontAwesomeIcon icon={faCloud} size=\"lg\" color=\"#212121\" />\r\n  }\r\n  return (\r\n    <Card className=\"weather-card-main\">\r\n      <Card.Content className=\"weather-card\">\r\n        <Card.Header className=\"weather-card-child\">{city}</Card.Header>\r\n        <div className=\"icon-container\">\r\n          {weatherIcons}\r\n        </div>\r\n      </Card.Content>\r\n      <Card.Content>\r\n        <Feed>\r\n          <Feed.Event>\r\n            <Feed.Content>\r\n              <h5 className=\"weather-card-child\">\r\n                {moment().format('MMMM Do, h:mm a')}\r\n              </h5>\r\n              <div className=\"weather-card\">\r\n                <div className=\"weather-card-child\">\r\n                  <b>Temprature</b>: {Math.floor(temprature)} ℃\r\n                </div>\r\n                <div className=\"weather-card-child\">\r\n                  <b>Humidity</b>: {humidity} %\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"weather-card\">\r\n                <div className=\"weather-card-child\">\r\n                  <b>Sunrise</b>: {new Date(sunrise * 1000).toLocaleTimeString('en-IN')}\r\n                </div>\r\n                <div className=\"weather-card-child\">\r\n                  <b>Sunset</b>: {new Date(sunset * 1000).toLocaleTimeString('en-IN')}\r\n                </div>\r\n              </div>\r\n\r\n            </Feed.Content>\r\n          </Feed.Event>\r\n        </Feed>\r\n      </Card.Content>\r\n    </Card>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Card } from 'semantic-ui-react';\r\nimport moment from 'moment';\r\n\r\nexport default function Forecast({ forcast }) {\r\n    return (\r\n        <div style={{ marginTop: 20 }}>\r\n            <div className=\"forecast-main-header\">\r\n                8 Day Forecast\r\n            </div>\r\n            <Card.Group itemsPerRow={4}>\r\n                {forcast.map((data) => {\r\n                    return (\r\n                        <Card className=\"forecast-card\">\r\n                            <Card.Content>\r\n                                <Card.Header className=\"forecast-date\">\r\n                                    Date: {moment.unix(data.dt).format('LL')}\r\n                                </Card.Header>\r\n                                <Card.Header className=\"forecast-header\">\r\n                                    Temprature: {Math.round((data.temp.max + data.temp.min) / 2)} ℃\r\n                                </Card.Header>\r\n                                <Card.Meta className=\"forecast-header\">\r\n                                    Humidity: {data.humidity} %\r\n                                </Card.Meta>\r\n                                <Card.Description className=\"temp-desc\">\r\n                                    Description: {data.weather[0].description}\r\n                                </Card.Description>\r\n                            </Card.Content>\r\n                        </Card>\r\n                    )\r\n                })}\r\n            </Card.Group>\r\n        </div>\r\n    )\r\n}\r\n","import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport WeatherCard from './components/WeatherCard';\r\nimport Forecast from './components/Forecast';\r\nimport { Loader } from 'semantic-ui-react';\r\n\r\n//const URL = `https://api.openweathermap.org/data/2.5/onecall`\r\nconst URL = `https://api.openweathermap.org/data/3.0/onecall`\r\n\r\n//const API_KEY = `79fe268ac77e4dd5338dd5e51fa9a113`\r\n\r\nfunction App() {\r\n  const [latitude, setLatitude] = useState(null);\r\n  const [longitude, setLongitude] = useState(null);\r\n  const [city, setCity] = useState('');\r\n  const [temprature, setTemprature] = useState(null);\r\n  const [humidity, setHumidity] = useState(null);\r\n  const [sunrise, setSunrise] = useState(null);\r\n  const [sunset, setSunset] = useState(null);\r\n  const [icon, setIcon] = useState('');\r\n  const [forcast, setForecast] = useState([]);\r\n  const [loading, setloading] = useState(true);\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n      setLatitude(position.coords.latitude);\r\n      setLongitude(position.coords.longitude);\r\n    });\r\n\r\n    axios.get(`${URL}?lat=${latitude}&lon=${longitude}&exclude=hourly,minutely&appid=79fe268ac77e4dd5338dd5e51fa9a113&units=metric`)\r\n      .then((weatherData) => {\r\n        setloading(false)\r\n        setTemprature(weatherData.data.current.temp);\r\n        setSunset(weatherData.data.current.sunset)\r\n        setSunrise(weatherData.data.current.sunrise)\r\n        setHumidity(weatherData.data.current.humidity)\r\n        setCity(weatherData.data.timezone)\r\n        setIcon(weatherData.data.current.weather[0].main)\r\n        setForecast(weatherData.data.daily)\r\n      })\r\n\r\n  }, [latitude, longitude])\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Header />\r\n      {loading ? (\r\n        <div>\r\n          <p>Loading..Please Wait</p>\r\n          <Loader active inline='centered' />\r\n        </div>\r\n      ) : (\r\n        <WeatherCard\r\n          temprature={temprature}\r\n          humidity={humidity}\r\n          sunrise={sunrise}\r\n          sunset={sunset}\r\n          city={city}\r\n          icon={icon}\r\n        />\r\n      )}\r\n      <Forecast forcast={forcast} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}